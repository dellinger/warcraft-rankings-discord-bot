{"version":3,"sources":["Bot.ts"],"names":[],"mappings":"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","file":"Bot.js","sourcesContent":["///<reference path=\"../typings/tsd.d.ts\" />\r\n\"use strict\";\r\nimport * as Discord from \"discord.js\";\r\nimport BasicActions from \"./BasicActions\";\r\nimport WCLActions from \"./WCLActions\";\r\n\r\nexport class DiscordBot {\r\n\r\n    public bot : Discord.Client;\r\n    public supportedActions = {};\r\n    constructor() {\r\n        //TODO: DI these later?\r\n        this.bot = new Discord.Client();\r\n        var basicActions = new BasicActions();\r\n        var wclActions = new WCLActions();\r\n        this.initialize();\r\n        this.supportedActions['!ping'] = basicActions.pong;\r\n        this.supportedActions[\"!help\"] = this.listCommands;\r\n        \r\n        this.supportedActions[\"!parse\"] = wclActions.retrieveParse;\r\n        this.supportedActions[\"!classes\"] = wclActions.getClasses;\r\n        this.supportedActions[\"!zones\"] = wclActions.getZones;\r\n        this.supportedActions[\"!rank\"] = wclActions.getCharacterRankings;\r\n    }\r\n\r\n    //TODO: Make this a promise?\r\n    initialize() {\r\n        let that = this;\r\n        console.log(\"Logging in...\");\r\n    \r\n        this.bot.loginWithToken(process.env.BOT_TOKEN,null,null, (error : Error, token : string) => {\r\n            if(error){\r\n                console.error(\"Error occured\");\r\n            }\r\n            console.log(`Token: ${token}`);\r\n        });\r\n\r\n        this.bot.on(\"message\", message => {\r\n            if(!message.author.bot) {\r\n                let messageArray = message.cleanContent.split(\" \");\r\n                let potentialAction = messageArray[0];\r\n                let splicedMessageArray = messageArray.splice(1, messageArray.length);\r\n                console.log(`Potential Action: ${potentialAction}`);\r\n                if(that.isSupportedAction(potentialAction)) {\r\n                    console.log(`'${potentialAction}' is supported!`);\r\n                    let action = that.supportedActions[potentialAction];\r\n                    action(that.bot,message,...splicedMessageArray);\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    listCommands = (bot,message) => {\r\n        let that = this;\r\n        let actions = \"\";\r\n        Object.getOwnPropertyNames(that.supportedActions).forEach((val, idx, array) => {\r\n           actions += `\\`\\`\\`${val}\\`\\`\\`\\n`\r\n        });\r\n        bot.sendMessage(message.channel,`This bot recognizes the following commands:\\n ${actions}`);\r\n    };\r\n\r\n    isSupportedAction = (message) => {\r\n        let isSupported = this.supportedActions.hasOwnProperty(message);\r\n        return isSupported;\r\n    };\r\n\r\n\r\n}"],"sourceRoot":"/source/"}