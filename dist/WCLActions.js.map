{"version":3,"sources":["WCLActions.ts"],"names":[],"mappings":"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","file":"WCLActions.js","sourcesContent":["var request = require('request');\r\nvar prettyjson = require(\"prettyjson\");\r\n\r\ninterface Encounter {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ninterface Bracket {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ninterface Zone {\r\n    id: number\r\n    name: string\r\n    frozen: boolean\r\n    encounters: Encounter[]\r\n    brackets: Bracket[]\r\n}\r\n\r\ninterface Specialization {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ninterface PlayerClass {\r\n    id: number\r\n    name: string\r\n    specs: Specialization[]\r\n}\r\n\r\ninterface CharacterParse {\r\n    difficulty : number;\r\n    size : number;\r\n    kill: number;\r\n    name: string;\r\n    specs: CharacterParseSpec[];\r\n    variable : boolean;\r\n}\r\n\r\ninterface CharacterParseSpec {\r\n    class : string;\r\n    spec: string;\r\n    combined: boolean;\r\n    best_persecondamount: number;\r\n    best_duration: number;\r\n    best_historical_percent: number;\r\n    best_allstar_points: number;\r\n    best_combined_allstar_points: number;\r\n    possible_allstar_points: number;\r\n    best_spec: string;\r\n    best_spec_performance: string;\r\n    historical_total: number;\r\n    historical_median: number;\r\n    historical_avg: number;\r\n    best_talents: CharacterParseTalents[];\r\n    best_gear: CharacterParseGear[];\r\n}\r\n\r\ninterface CharacterParseTalents {\r\n    name: string;\r\n    id: number;\r\n}\r\n\r\ninterface CharacterParseGear {\r\n    name: string;\r\n    quality: string;\r\n    id: number;\r\n}\r\n\r\nclass Difficulty {\r\n    static MYTHIC = 5;\r\n    static HEROIC = 4;\r\n    static NORMAL = 3;\r\n}\r\n\r\nexport default class WCLActions {\r\n\r\n    retrieveParse(bot: any, message: any, characterName :string, serverName: string, serverRegion : string) {\r\n        console.log(message);\r\n        var messageArray : string[] = message.content.split(' ');\r\n        if(messageArray.length !== 5) {\r\n            bot.reply(message, \"Need to enter ```!parse *CHARACTER_NAME* *SERVER_NAME* *REGION* *BOSS*```\");\r\n        } else {\r\n            var characterName = messageArray[1];\r\n            var serverName = messageArray[2];\r\n            var serverRegion = messageArray[3];\r\n            let boss = messageArray[4];\r\n            let that = this;\r\n            let uri = `https://www.warcraftlogs.com:443/v1/parses/character/${characterName}/${serverName}/${serverRegion}?api_key=${process.env.WCL_PUBLIC_KEY}&metric=dps&compare=1`;\r\n            console.log(uri);\r\n            request(uri, (error, response, body) => {\r\n                if(!error && response.statusCode == 200) {\r\n                    let test = JSON.parse(response.body);\r\n                    let characterParse : CharacterParse[] = JSON.parse(response.body);\r\n                    let botReply = \"\";\r\n                    characterParse.forEach( (parse, index, array) => {\r\n                        if(parse.name.toLocaleUpperCase().indexOf(boss.toLocaleUpperCase()) > -1) {\r\n                            botReply = \"\";\r\n                            botReply += `--- ${parse.name} ---\\n`;\r\n                            parse.specs.forEach( (spec, index, array) => {\r\n                                botReply += `- Best ${spec.spec} DPS: ${spec.best_persecondamount}-\\n`;\r\n                            });\r\n                            bot.reply(message, botReply);\r\n                        } else {\r\n                            bot.reply(message, `Couldn't find parse`);\r\n                        }\r\n\r\n                    });\r\n\r\n                } else {\r\n                    bot.reply(message, body);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public getClasses(bot : any, message:any) {\r\n        let uri = `http://www.warcraftlogs.com/v1/classes?api_key=${process.env.WCL_PUBLIC_KEY}`;\r\n        console.log(uri);\r\n        request({ method : 'GET', uri: uri, json: true}, (error, response, body) => {\r\n            if(!error && response.statusCode == 200) {\r\n                console.log(`getClasses response: ${response}`);\r\n                let playerClasses : PlayerClass[] = response.body;\r\n                bot.sendMessage(message.channel, `\\`\\`\\`${prettyjson.render(playerClasses)}\\`\\`\\`\\n`);\r\n            } else {\r\n                bot.reply(message, body.toString());\r\n            }\r\n        });\r\n    }\r\n\r\n    public getZones(bot: any, message: any) {\r\n        let uri = `http://www.warcraftlogs.com/v1/zones?api_key=${process.env.WCL_PUBLIC_KEY}`;\r\n        console.log(uri);\r\n        var messageArray : string[] = message.content.split(' ');\r\n        request({ method : 'GET', uri: uri, json: true}, (error, response, body) => {\r\n            if(!error && response.statusCode == 200) {\r\n                let zones : Zone[] = response.body;\r\n                if(messageArray.length === 2) {\r\n                    let zoneToSearchFor = messageArray[1].toLocaleUpperCase();\r\n                    let isFound = false;\r\n                    zones.every( (value,index,array) => {\r\n                        if(value.name.toLocaleUpperCase() === zoneToSearchFor || value.name.toLocaleUpperCase().indexOf(zoneToSearchFor) > -1) {\r\n                            console.log(`Found zone user selected`);\r\n                            bot.sendMessage(message.channel, `\\`\\`\\`${prettyjson.render(value)}\\`\\`\\`\\n`);\r\n                            isFound = true;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    if(!isFound){\r\n                        bot.sendMessage(message.channel, `Could not find zone with name '${zoneToSearchFor}'`);\r\n                    }\r\n                } else {\r\n                    // all zones\r\n                    bot.sendMessage(message.channel, `\\`\\`\\`${prettyjson.render(zones.map( a => {return `${a.id} :: ${a.name}`;}))}\\`\\`\\`\\n`);\r\n                }\r\n            } else {\r\n                bot.sendMessage(message.channel, `\\`\\`\\`${prettyjson.render(body)}\\`\\`\\`\\n`);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getCharacterRankings(bot: any, message: any, characterName : string, serverName : string, serverRegion: string) {\r\n        let uri = `http://www.warcraftlogs.com/v1/rankings/character${characterName}/${serverName}/${serverRegion}?api_key=${process.env.WCL_PUBLIC_KEY}`;\r\n        console.log(uri);\r\n        request({ method : 'GET', uri: uri, json: true}, (error, response, body) => {\r\n            if(!error && response.statusCode == 200) {\r\n                let ranks = response.body;\r\n                console.log(`ranks: ${prettyjson.render(ranks)}`);\r\n                bot.sendMessage(message.channel, `\\`\\`\\`${prettyjson.render(ranks)}\\`\\`\\`\\n`);\r\n            } else {\r\n                bot.sendMessage(message.channel, `\\`\\`\\`${prettyjson.render(body)}\\`\\`\\`\\n`);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n}"],"sourceRoot":"/source/"}